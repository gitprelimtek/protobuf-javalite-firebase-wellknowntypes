#!/bin/bash

CURRENT=`pwd`
CONTEXT_DIR=`dirname "$0"`


#echo "The script you are running has basename `basename "$0"` "
#echo "The script you are running has dirname `dirname "$0"` "
#echo "The present working directory is `pwd`"

cd $CONTEXT_DIR

##download artifacts to ./lib
mvn dependency:copy-dependencies -DoutputDirectory=lib  && echo mvn dependencies downloaded OK || ( echo Failed; exit 1 )



## extract artifact classes into ./extracted
## note: there is a desired sequence of dependencies in order to override some class implementations

mkdir extracted  && echo "extracted/ created" || echo "extracted/ create failed"
cd ./extracted && echo "extracted/ found" || ( echo "extracted/ not found. Exiting" ; exit 1 )

## protobuf-javalite

jar xf ../lib/protobuf-javalite*jar && echo "protobuf-javalite extracted OK " || ( echo "protobuf-javalite extraction failed. Exiting"; exit 1 )

## proto-google-common-protos

jar xf ../lib/proto-google-common-protos*jar && echo "proto-google-common-protos extracted OK " || ( echo "proto-google-common-protos extraction failed. Exiting"; exit 1 )

## protolite-well-known-types
## rename file with .aar to .jar
mv ../lib/protolite-well-known-types*aar ../lib/protolite-well-known-types.jar
  
jar xf ../lib/protolite-well-known-types.jar && echo "protolite-well-known-types extracted OK " || ( echo "protolite-well-known-types extraction failed. Exiting"; exit 1 )

## extract classes.jar generated by protolite-well-known-types.jar

jar xf ./classes.jar && echo "classes extracted OK " || ( echo "classes extraction failed. Exiting"; exit 1 )

rm ./classes.jar

## create the output jar from extracted
mkdir ../output/

jar cf ../output/my-protobuf-javalite-firebase-wellknowntypes.jar  * && echo "my-protobuf-javalite-firebase-wellknowntypes.jar created OK " || ( echo "my-protobuf-javalite-firebase-wellknowntypes.jar create failed. Exiting"; exit 1 )



